<?php

/**
 * @file
 * Read and Write Jekyll files.
 */

require DRUPAL_ROOT . '/profiles/dekyll/libraries/vendor/autoload.php';

use GitWrapper\GitWrapper;
use GitWrapper\GitWorkingCopy;
use GitWrapper\GitException;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Yaml\Parser;
use Symfony\Component\Yaml\Dumper;

/**
 * Define the YAML front header separator.
 */
define('YAML_SEPARATOR', "---\n");

/**
 * Implements hook_ctools_plugin_directory().
 */
function dekyll_sync_ctools_plugin_directory($module, $plugin) {
  if ($module == 'dekyll_sync') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function dekyll_sync_ctools_plugin_api($module, $api) {
  if ($module == 'dekyll_sync' && in_array($api, 'config_sync', 'content_sync')) {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function dekyll_sync_ctools_plugin_type() {
  $plugins['config_sync'] = array(
    'classes' => array('class'),
    'process' => 'dekyll_sync_config_sync_plugin_process',
  );

  $plugins['content_sync'] = array(
    'classes' => array('class'),
    'process' => 'dekyll_sync_content_sync_plugin_process',
  );
  return $plugins;
}

/**
 * Add defaults values to the notifier plugins.
 */
function dekyll_sync_config_sync_plugin_process(&$plugin, $info) {
  $plugin += array(
    'description' => '',
    'weight' => 0,
  );
}

/**
 * Helper function to include CTools plugins and get a notifier plguin.
 *
 * @param $plugin_name
 *   The plugin that should be laoded.
 */
function dekyll_sync_get_config_sync($plugin_name) {
  ctools_include('plugins');
  return ctools_get_plugins('dekyll_sync', 'config_sync', $plugin_name);
}

/**
 * Helper function to include CTools plugins and get all notifier plugins.
 */
function dekyll_sync_get_config_syncs() {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('dekyll_sync', 'config_sync');
  uasort($plugins, 'drupal_sort_weight');
  return $plugins;
}

/**
 * Add defaults values to the notifier plugins.
 */
function dekyll_sync_content_sync_plugin_process(&$plugin, $info) {
  $plugin += array(
    'description' => '',
    'weight' => 0,
    // Allow mapping a field name to a different property name in Jekyll. e.g.
    // "field_foo" in Drupal will be mapped to "bar" in Jekyll's YAML.
    'jekyll name' => TRUE,
  );
}

/**
 * Helper function to include CTools plugins and get a notifier plguin.
 *
 * @param $plugin_name
 *   The plugin that should be laoded.
 */
function dekyll_sync_get_content_sync($plugin_name) {
  ctools_include('plugins');
  return ctools_get_plugins('dekyll_sync', 'content_sync', $plugin_name);
}

/**
 * Helper function to include CTools plugins and get all notifier plugins.
 */
function dekyll_sync_get_content_syncs() {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('dekyll_sync', 'content_sync');
  uasort($plugins, 'drupal_sort_weight');
  return $plugins;
}

/**
 * Implements hook_cron_queue_info().
 */
function dekyll_sync_cron_queue_info() {
  $queues['dekyll_import'] = array(
    'worker callback' => 'dekyll_sync_import_queue_worker',
    'time' => 60,
  );

  $queues['dekyll_export'] = array(
    'worker callback' => 'dekyll_sync_export_queue_worker',
    'time' => 60,
  );

  return $queues;
}

/**
 * Get content sync mapping.
 *
 * @return
 *   Array keyed by the plugin name, and array of field/ property names as the
 *   value.
 */
function dekyll_sync_get_content_sync_map($entity_type, $bundle) {
  $map = array();
  foreach (field_info_instances($entity_type, $bundle) as $field_name => $instance) {
    if (empty($instance['settings']['content_sync']['plugin_name'])) {
      continue;
    }

    $plugin_name = $instance['settings']['content_sync']['plugin_name'];

    $map[$plugin_name][] = $field_name;
  }

  // Allow other modules to change this.
  drupal_alter('dekyll_sync_get_content_sync_map', $map);

  return $map;
}

/**
 * Recursive function to prepare the array of files to export.
 *
 * @param EntityDrupalWrapper $wrapper
 * @param array $info
 * @param EntityDrupalWrapper $parent_wrapper
 * @param bool $is_page
 */
function _dekyll_sync_prepare_files_for_export(EntityDrupalWrapper $wrapper, &$info = array(), EntityDrupalWrapper $parent_wrapper = NULL, $is_page = TRUE, $jekyll_name = '') {
  // Get all the field instances of the bundle.
  $identifier = $wrapper->type() . ':' . $wrapper->getIdentifier();
  $parent_identifier = $parent_wrapper ? $parent_wrapper->type() . ':' . $parent_wrapper->getIdentifier() : FALSE;

  $entity_type = $wrapper->type();
  $bundle = $wrapper->getBundle();

  if (!$parent_wrapper) {
    // @todo: Allow first level nodes to opt out from being a page.
  }

  $file_path = '';

  if ($is_page) {
    $parent_dirname = '';
    if (!empty($info[$parent_identifier]['file_path'])) {
      // Get the parent file path.
      $parent_file_path = $info[$parent_identifier]['file_path'];
      $path_parts = pathinfo($parent_file_path);

      $parent_dirname = $path_parts['dirname'] . '/';
      $parent_basename = $path_parts['basename'];
    }

    $parent_basename = !empty($parent_basename) ? $parent_basename : 'index.html';

    // Prepare the file path.
    if (isset($wrapper->field_file_path) && $file_path = $wrapper->field_file_path->value()) {
      $file_path = $parent_dirname . $file_path;
    }
    else {
      // No field path, so use the label.
      ctools_include('cleanstring');
      $label = ctools_cleanstring($wrapper->label(), array('lower case' => TRUE));
      $file_path = $parent_dirname . $label . '/' . $parent_basename;
    }
  }

  $info[$identifier] = array(
    'wrapper' => $wrapper,
    'sync_map' => dekyll_sync_get_content_sync_map($entity_type, $bundle),
    'entity_id' => $identifier,
    'page' => $is_page,
    // We pass the file path even if the entity isn't a page, so it's children
    // can use it, if needed.
    'file_path' => $file_path,
    'children' => array(),
    'jekyll_name' => $jekyll_name,
  );

  foreach (field_info_instances($entity_type, $bundle) as $field_name => $instance) {
    $field = field_info_field($field_name);

    if (!in_array($field['type'], array('entityreference', 'commerce_product_reference'))) {
      // Not an entity/ product reference field.
      continue;
    }

    if (empty($instance['settings']['content_sync']['plugin_name'])) {
      continue;
    }

    if (!in_array($instance['settings']['content_sync']['plugin_name'], array('entity_reference', 'commerce_product'))) {
      // Field doesn't use the entity-reference or product reference content
      // sync plugins.
      continue;
    }

    // The field is referencing an entity that should be used as a page.
    $child_is_page = !empty($instance['settings']['content_sync']['settings']['create_page']);

    $jekyll_name = !empty($instance['settings']['content_sync']['settings']['jekyll_name']) ? $instance['settings']['content_sync']['settings']['jekyll_name'] : $field_name;

    if ($field['cardinality'] == 1) {
      $sub_wrapper = $wrapper->{$field_name};
      _dekyll_sync_prepare_files_for_export($sub_wrapper, $info[$identifier]['children'], $wrapper, $child_is_page, $jekyll_name);
    }
    else {
      foreach ($wrapper->{$field_name} as $sub_wrapper) {
        // Iterate over the entities, and let them add their info.
        _dekyll_sync_prepare_files_for_export($sub_wrapper, $info[$identifier]['children'], $wrapper, $child_is_page, $jekyll_name);
      }
    }
  }
}


/**
 * Recursive function to get the files path, and their info per entity.
 *
 * @param EntityDrupalWrapper $wrapper
 * @param array $info
 * @param $parent_wrapper
 * @param $filter_non_pages
 *   Optional; Determine if the returned array should filter out entities that
 *   are not pages. Defaults to TRUE.
 */
function dekyll_sync_get_files_for_export(EntityDrupalWrapper $wrapper, &$info = array()) {
  _dekyll_sync_prepare_files_for_export($wrapper, $info);

  // Allow other modules to change the array.
  drupal_alter('dekyll_sync_get_files_for_export', $info);

  // Filter out entities that should not be created as pages.
  foreach ($info as $key => $value) {
    if (empty($value['page'])) {
      // unset($info[$key]);
    }
  }
}

/**
 * Queue Worker; Export a node to Jekyll.
 *
 * @param $queue_item
 */
function dekyll_sync_export_queue_worker($data) {
  dekyll_sync_export($data['nid'], $data['branch']);
}

/**
 * Recursive function that calls the execute handlers.
 */
function _dekyll_sync_execute_export_handlers($branch_id, $is_canonical, $files_info, &$file_names = array(), &$yaml = array(), &$text = '', $file_path = '', $is_root = TRUE) {
  $parser = &drupal_static(__FUNCTION__ . '_parser', FALSE);
  $dumper = &drupal_static(__FUNCTION__ . '_dumper', FALSE);
  $complete_files_info = &drupal_static(__FUNCTION__ . '_complete_files_info', array());
  $pages = &drupal_static(__FUNCTION__ . '_pages', array());

  if (empty($dumper)) {
    // On the first iteration we initalize the dumper and parser objects and
    // capture the full "files-info" array.
    $parser = new Parser();
    $dumper = new Dumper();
    $complete_files_info = $files_info;
  }

  $path = dekyll_repository_get_repo_path($branch_id);

  foreach ($files_info as $file_info) {
    $yaml_contents = array();

    if (!$file_path && $file_info['page']) {
      $file_path = $file_info['file_path'];
      $file_names[] = $file_path;
      $full_path = $path . '/' . $file_path;

      if (!$is_canonical && file_exists($full_path)) {
        $contents = file_get_contents($full_path);

        // Get the values from the YAML front header.
        $split_contents = explode(YAML_SEPARATOR, $contents, 3);
        $yaml_contents = $split_contents[1];
      }
    }

    $jekyll_name = $file_info['jekyll_name'];
    if (!$jekyll_name) {
      $sub_yaml = &$yaml;
    }
    else {
      $sub_yaml = &$yaml[$jekyll_name][];
    }


    $sub_yaml = $yaml_contents ? $parser->parse($yaml_contents) : array();

    // Get the text from the node.
    // @todo: Make configurable.
    $wrapper = $file_info['wrapper'];
    $text = isset($wrapper->body) && $wrapper->body->value() ? $wrapper->body->value->raw() : $text;

    $sync_map = $file_info['sync_map'];

    foreach (dekyll_sync_get_content_syncs() as $plugin) {
      if (!$class_name = ctools_plugin_load_class('dekyll_sync', 'content_sync', $plugin['name'], 'class')) {
        // Class no longer exists.
        continue;
      }

      if (drupal_is_cli()) {
        $params = array(
          '@plugin' => $plugin['title'],
          '@entity_id' => $file_info['entity_id'],
          '@file_path' => $file_path
        );
        drush_log(dt('Executing @plugin on entity ID @entity_id for file @file_path.', $params));
      }

      $content_sync = new $class_name($plugin, $sync_map, $branch_id, $file_path);

      $new_file_names = array();
      if ($content_sync->access('export', NULL, NULL, $sync_map)) {
        // YAML and text are passed by reference.
        // Add file names that were created by the content sync handlers.
        $new_file_names = $content_sync->export($wrapper, $sub_yaml, $text, $files_info);
      }

      if ($new_file_names) {
        $file_names = array_merge($file_names, $new_file_names);
      }
    }

    // Iterate over the children.
    foreach ($file_info['children'] as $child_info) {
      if ($child_info['page'] && empty($pages[$child_info['entity_id']])) {
        // We've reached a new page, so re-iterate over the whole "files-info"
        // and build the new page.
        $pages[$child_info['entity_id']] = TRUE;
        _dekyll_sync_execute_export_handlers($branch_id, $is_canonical, $complete_files_info, $file_names, $yaml, $text, $file_path, TRUE);
      }

      // Continue digging into the tree, pass it the child as the "files-info".
      _dekyll_sync_execute_export_handlers($branch_id, $is_canonical, array($child_info), $file_names, $sub_yaml, $text, $file_path, FALSE);
    }
  }

  if (!$is_root) {
    // We are still inside the tree.
    return;
  }

  $dump = array(
    YAML_SEPARATOR,
    // Dump the YAML expanded, and not inline.
    $dumper->dump($yaml, 5) . "\n",
    YAML_SEPARATOR,
    $text,
  );

  $full_path = $path . '/' . $file_path;

  if (!file_exists($full_path)) {
    $path_parts = pathinfo($full_path);
    drupal_mkdir($path_parts['dirname'], NULL, TRUE);
  }

  file_put_contents($full_path, implode('', $dump));
}

/**
 * Export a node and it's related entities, and write it to file(s).
 *
 * @param $nid
 *   The node ID.
 */
function dekyll_sync_export($nid) {
  $wrapper = entity_metadata_wrapper('node', $nid);

  if (!isset($wrapper->field_file_path)) {
    drush_log(dt('Cannot export node of type @type', array('@type' => $wrapper->getBundle())), 'error');
    return;
  }

  $branch_id = $wrapper->field_repo_branch->value(array('identifier' => TRUE));

  $is_canonical = $wrapper->{OG_AUDIENCE_FIELD}->field_repo_canonical->value();

  $path = dekyll_repository_get_repo_path($branch_id);

  $git_wrapper = new GitWrapper();
  $git = $git_wrapper->workingCopy($path);

  // Get an array with all the files that we will need to write.
  $files_info = array();
  dekyll_sync_get_files_for_export($wrapper, $files_info);

  if (!$files_info) {
    return;
  }

  // Array of file names to add to git.
  $file_names = array();
  _dekyll_sync_execute_export_handlers($branch_id, $is_canonical, $files_info, $file_names);

  foreach ($file_names as $file_name) {
    // Add files to git.
    $git->add($file_name);
    if (drupal_is_cli()) {
      drush_log('Added @file to git.', array('@file' => $file_name));
    }

  }

  if (!$git->hasChanges()) {
    if (drupal_is_cli()) {
      drush_log('No changes to commit.');
    }
    return;
  }


  // Commit and push.
  // @todo: Move to a single function.
  try {
    if (drupal_is_cli()) {
      drush_log('Pushing to git.');
    }
    $git
      ->pull()
      ->commit('Changes of file.')
      ->push();
  }
  catch (GitException $e){
    // If we couldn't push, we might need to push. So re-sync.
    // @todo: Check if we have connection first, and throw error if not?
    // drush_dekyll_sync_dekyll_sync(array('gid' => $gid));
  }

  if (drupal_is_cli()) {
    drush_log('Export @id done.', array('@id' => $nid));
  }
}

/**
 * Queue Worker; Import Jekyll configuration and content.
 *
 * @param $queue_item
 */
function dekyll_sync_import_queue_worker($data) {
  // @todo: Change to branch_id.
  dekyll_sync_import($data['nid']);
}

/**
 * Sync Drupal with Jekyll.
 *
 * @param $branch_id
 *   The Branch node ID.
 *
 * Iterate over all the files and create or update a node to link to them.
 * We use .dekyll/node_map.yml file to hold each file, its hash and the related
 * node ID.
 */
function dekyll_sync_import($branch_id, $sync_type = array('config', 'content'), $force_sync = FALSE) {
  $path = dekyll_repository_get_repo_path($branch_id);

  $git_wrapper = new GitWrapper();
  $git = $git_wrapper->workingCopy($path);

  try {
    $git->pull();
  }
  catch (GitException $e){
    // @todo: Handle merge conflicts (Don't overwrite conflicting nodes, just
    // mark them as conflicts).
  }

  // Config sync.
  if (in_array('config', $sync_type)) {
    foreach (dekyll_sync_get_config_syncs() as $plugin) {
      if (!$class = ctools_plugin_load_class('dekyll_sync', 'config_sync', $plugin['name'], 'class')) {
        continue;
      }
      $config_sync = new $class($plugin, $branch_id, $git);
      $config_sync->import();
    }

    if (drupal_is_cli()) {
      drush_log(dt('Synced config of branch ID @nid', array('@nid' => $branch_id)));
    }
  }

  // Content sync.
  if (in_array('content', $sync_type)) {
    // Map file path to the node ID.
    $map = dekyll_sync_get_yml($branch_id, '.dekyll/node_map.yml');

    // Iterate over all the valid files, and compare them to the map value.
    $finder = new Finder();
    $finder
      ->files()
      ->in($path)
      ->notPath('/^_(?!posts|drafts)/')
      ->notPath('assets');

    // Get the current installation global unique identifier.
    $dekyll_guid = variable_get('dekyll_guid');

    foreach ($finder as $file) {
      // Check if we have this file in the map.
      $file_path = $file->getRelativePathname();
      $hash = trim($git->run(array('hash-object ' . $file_path)));
      if (!empty($map[$file_path][$dekyll_guid]) && !$force_sync) {
        // Check if the hash changed.
        if ($hash == $map[$file_path][$dekyll_guid]['hash']) {
          // File didn't change.
          continue;
        }
      }

      $nid = !empty($map[$file_path][$dekyll_guid]['nid']) ? $map[$file_path][$dekyll_guid]['nid'] : NULL;

      // Create node.
      if ($node = dekyll_sync_import_file($file_path, $branch_id, $git, $nid, TRUE)) {
        if (drupal_is_cli()) {
          drush_log(dt('Synced content of file @file to node ID @nid', array('@file' => $file_path, '@nid' => $node->nid)));
        }
        $map[$file_path][$dekyll_guid] = array(
          'hash' => $hash,
          'nid' => $node->nid,
        );
      }
    }

    dekyll_sync_save_yml($branch_id, '.dekyll/node_map.yml', $map);
  }
}


/**
 * @param $branch_id
 *   The Branch node ID.
 * @param $file_name
 *   The file name.
 *
 * @return array
 *   The parsed YAML, or empty YAML if file doesn't exist.
 */
function dekyll_sync_get_yml($branch_id, $file_name) {
  $path = dekyll_repository_get_repo_path($branch_id);

  $file_path = $path . '/' . $file_name;
  if (!file_exists($file_path)) {
    return array();
  }

  // Open the YAML file .
  $contents = file_get_contents($file_path);

  // Parse the contents.
  $yaml = new Parser();
  return $yaml->parse($contents);
}

/**
 * @param $branch_id
 *   The Branch node ID.
 * @param $file_name
 *   The file name.
 * @param $data
 *   The array to dump into the file.
 */
function dekyll_sync_save_yml($branch_id, $file_path, $data = array(), $commit_message = '') {
  // Content sync.
  $path = dekyll_repository_get_repo_path($branch_id);

  $git_wrapper = new GitWrapper();
  $git = $git_wrapper->workingCopy($path);

  $full_path = $path . '/' . $file_path;

  if (!file_exists($full_path)) {
    $path_parts = pathinfo($full_path);
    drupal_mkdir($path_parts['dirname'], NULL, TRUE);
  }

  $dumper = new Dumper();
  file_put_contents($full_path, $dumper->dump($data, 10));

  $commit_message = $commit_message ? $commit_message : 'Commit ' . $file_path;

  // Push to git.
  try {
    $git
      ->commit($file_path, array('m' => $commit_message));
  }
  catch(GitException $e) {
    // File didn't change, we can return;
    return;
  }

  try {
    $git->push();
  }
  catch(GitException $e) {
    // @todo: We couldn't push. Handle this (need to pull, not internet
    // connection, etc'.)
  }
}

/**
 * Create a node or update existing from file.
 *
 * @param $file_path
 *   The file path.
 */
function dekyll_sync_import_file($file_path, $branch_id, GitWorkingCopy $git, $nid = NULL, $sync = FALSE) {
  $path = dekyll_repository_get_repo_path($branch_id);
  $contents = file_get_contents($path . '/' . $file_path);

  if (strpos($contents, '---') !== 0) {
    // File doesn't have YAML front matter.
    return;
  }

  // Get the values from the YAML front matter.
  // @todo: Isn't there a line break?
  $split_contents = explode('---', $contents, 3);
  $text = $split_contents[2];

  if ($nid) {
    $wrapper = entity_metadata_wrapper('node', $nid);
    $bundle = $wrapper->getBundle();
  }
  else {
    if (strpos($file_path, '_posts') === 0) {
      $bundle = 'post';
    }
    elseif (strpos($file_path, 'products/') === 0) {
      $bundle = 'product_page';
    }
    else {
      $bundle = 'page';
    }

    // Allow another module to change the bundle, according to more specific
    // logic.
    $context = array(
      'file_path' => $file_path,
      'branc_id' => $branch_id,
    );
    drupal_alter('dekyll_sync_import_file_bundle', $bundle, $context);

    // Create a new node.
    $node = (object) array(
      'type' => $bundle,
    );

    node_object_prepare($node);

    // @todo: Save the node using the group manager?
    $wrapper = entity_metadata_wrapper('node', $node);
  }

  $yaml = new Parser();
  $yaml_parsed = $yaml->parse($split_contents[1]);

  // Content sync, allow each plugin to change the node.
  $sync_map = dekyll_sync_get_content_sync_map('node', $bundle);
  foreach (dekyll_sync_get_content_syncs() as $plugin) {
    $class = ctools_plugin_load_class('dekyll_sync', 'content_sync', $plugin['name'], 'class');
    $content_sync = new $class($plugin, $sync_map, $branch_id, $file_path, $git);

    if ($content_sync->access('import', NULL, NULL, $sync_map)) {
      $content_sync->import($wrapper, $yaml_parsed, $text);
    }
  }


  // Add the text to the body field.
  // @todo: Is it worth a plugin?
  $wrapper->body->set(array('value' => $text, 'format' => 'dekyll_plain'));
  $wrapper->field_file_path->set($file_path);

  // Set the group.
  $branch_wrapper = entity_metadata_wrapper('node', $branch_id);
  $repo_id = $branch_wrapper->{OG_AUDIENCE_FIELD}->value(array('identifier' => TRUE));
  $wrapper->{OG_AUDIENCE_FIELD}->set($repo_id);

  // Set the Branch.
  $wrapper->field_repo_branch->set($branch_id);

  // Prevent from synced nodes to be written back to files.
  $node = $wrapper->value();
  $node->_dekyll_sync = $sync;
  $wrapper->save();

  return $wrapper->value();
}



// ------------------------------


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a setting to group content fields, to determine whether they will be
 * displayed on the mini node form of the browsing widget.
 */
function dekyll_sync_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  $field = $form['#field'];
  $instance = $form['#instance'];

  $form['instance']['settings']['dekyll'] = array(
    '#type' => 'container',
    '#attached' => array(
      // We use Entity-reference classes to indent the handler settings.
      'css' => array(drupal_get_path('module', 'entityreference') . '/entityreference.admin.css'),
    ),
    '#weight' => 10,
    '#tree' => TRUE,
    '#process' => array(
      '_dekyll_sync_form_process_merge_parent',
      '_dekyll_sync_field_instance_settings_form',
      '_dekyll_sync_field_settings_ajax_process',
    ),
    '#element_validate' => array('_dekyll_sync_field_instance_settings_validate'),
    '#field' => $field,
    '#instance' => $instance,
  );
}


function _dekyll_sync_field_instance_settings_form($form, $form_state) {
  $field = isset($form_state['content_sync']['field']) ? $form_state['content_sync']['field'] : $form['#field'];
  $instance = isset($form_state['content_sync']['instance']) ? $form_state['content_sync']['instance'] : $form['#instance'];

  _dekyll_sync_get_content_sync_elements($form, $field, $instance);
  if (!empty($form['content_sync'])) {
    $form['content_sync'] += array(
      '#type' => 'fieldset',
      '#title' => t('Dekyll Content sync'),
      '#process' => array(
        '_dekyll_sync_field_settings_ajax_process',
      ),
    );
  }

  return $form;
}

/**
 * Get the field or instance elements for the field configuration.
 */
function _dekyll_sync_get_content_sync_elements(&$element, $field, $instance) {
  $element['content_sync'] = array();

  $options = array('' => '-' . t('Select') . '-');
  // Get the accessible content sync handlers.
  foreach (dekyll_sync_get_content_syncs() as $plugin_name => $plugin) {

    $class_name = ctools_plugin_load_class('dekyll_sync', 'content_sync', $plugin_name, 'class');
    if (!class_exists($class_name)) {
      continue;
    }

    $content_sync = new $class_name($plugin);
    if ($content_sync->access('settings', $field, $instance)) {
      // @todo: call the access function.
      $options[$plugin['name']] = $plugin['title'];
    }
  }

  $element['content_sync'] = array(
    '#tree' => TRUE,
  );

  $plugin = NULL;

  if ($plugin_name = !empty($instance['settings']['content_sync']['plugin_name']) ? $instance['settings']['content_sync']['plugin_name'] : FALSE) {
    $plugin = dekyll_sync_get_content_sync($plugin_name);
  }

  $element['content_sync']['plugin_name'] = array(
    '#title' => t('Plugin name'),
    '#description' => $plugin ? $plugin['description'] : '',
    '#type' => 'select',
    '#options' => $options,
    '#ajax' => TRUE,
    '#default_value' => $plugin_name,
  );

  if (!$plugin) {
    return;
  }

  // Get the handler's settings form.
  $class_name = ctools_plugin_load_class('dekyll_sync', 'content_sync', $plugin_name, 'class');
  $class_name = class_exists($class_name) ? $class_name : 'ContentSyncBaseBroken';
  $content_sync = new $class_name($plugin);

  // Populate the default value.
  $settings = !empty($instance['settings']['content_sync']['settings']) ? $instance['settings']['content_sync']['settings'] : array();

  if ($plugin_elements = $content_sync->settingsForm($field, $instance)) {
    $element['content_sync']['settings'] = !empty($plugin_elements) ? $plugin_elements : array();

    $element['content_sync']['settings'] += array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('entityreference-settings'),
      ),
    );
  }
}

function _dekyll_sync_form_process_merge_parent($element) {
  $parents = $element['#parents'];
  array_pop($parents);
  $element['#parents'] = $parents;
  return $element;
}


function _dekyll_sync_field_instance_settings_validate($form, &$form_state) {
  // Store the new values in the form state.
  $instance = $form['#instance'];
  if (isset($form_state['values']['instance'])) {
    $instance = drupal_array_merge_deep($instance, $form_state['values']['instance']);
  }
  $form_state['content_sync']['instance'] = $instance;
}

function _dekyll_sync_field_settings_ajax_process($form, $form_state) {
  _dekyll_sync_field_settings_ajax_process_element($form, $form);
  return $form;
}


function _dekyll_sync_field_settings_ajax_process_element(&$element, $main_form) {
  if (isset($element['#ajax']) && $element['#ajax'] === TRUE) {
    $element['#ajax'] = array(
      'callback' => 'dekyll_sync_settings_ajax',
      'wrapper' => $main_form['#id'],
      'element' => $main_form['#array_parents'],
    );
  }

  foreach (element_children($element) as $key) {
    _dekyll_sync_field_settings_ajax_process_element($element[$key], $main_form);
  }
}

/**
 * Ajax callback for the handler settings form.
 *
 * @see dekyll_sync_field_settings_form()
 */
function dekyll_sync_settings_ajax($form, $form_state) {
  $trigger = $form_state['triggering_element'];
  return drupal_array_get_nested_value($form, $trigger['#ajax']['element']);
}

/**
 * Submit handler for the non-JS case.
 */
function dekyll_sync_settings_ajax_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}
